
/**
 * Project: lMCarousel
 * Version: 1.0.0
 **/
 var _timer;
(function (factory) {factory(jQuery); })(function($){
	$.fn.lMCarousel = function(options){
		var _defaults = {
				width : 3e2,				
				height: 2.5e2,			
				slides : [], 					
				slideLayout : 'fill', 			
				perspective: 3000,					
				animation: 'slide3D', 			
				animationCurve: 'ease',			
				animationDuration: 1e3,	
				animationInterval: 3e3,		
				autoplay: true,					
				controls: true,					
				slideClass: 'slide',
				navigation: 'circles',			
				rotationDirection: 'btt',
				onSlideShow: function(){}
		}
		
		var _settings = $.extend( true, {}, _defaults, options );
		var _container = this;
		var _width = _settings.width;
		var _height = _settings.height;
		var _aspectRatio = _settings.width/_settings.height;
		var _lMCarouselDiv = $( "<div class='lMCarousel' />" )
								.css({ width: '100%', height: '100%', transition:'transform '+_settings.animationDuration+'ms '+_settings.animationCurve, 'transformStyle': 'preserve-3d' })
								.appendTo(_container);
		var _currentSlideIndex = 0;
		var _targetSlideIndex = 1;
		var _animations = new Animations();
		var _previousButton;
		var _nextButton;
		var _timer2;
		var _timeOutTimer;
		var _videoSlide;
		var _baseAngle;
		var _rotationAngle = 0;
		var _translateZ;
		var _perspective;
		var _transform;
		var _noOfSlides = _settings.slides.length || _container.find('.'+_settings.slideClass).length;
		
		(function setup(){
			createlMCarousel();
			if(_settings.controls){_createControls();}
			if(_settings.autoplay){ _playlMCarousel();}
			
			function createlMCarousel(){
				if(_settings.animation.indexOf('slide')!=-1){
					_translateZ = (_width/2) / Math.tan(Math.PI/_noOfSlides);
					_perspective = (_width/2) * Math.tan(2*Math.PI/_noOfSlides)+'px';
				}else if(_settings.animation.indexOf('scroll')!=-1){
					_translateZ = (_height/2) / Math.tan(Math.PI/_noOfSlides);
					_perspective = (_height/2) * Math.tan(2*Math.PI/_noOfSlides)+'px';
				}else if(_settings.animation == 'fade'){
					_translateZ = (_width/2) / Math.tan(Math.PI/_noOfSlides);
					_perspective = (_width/2) * Math.tan(2*Math.PI/_noOfSlides)+'px';
				}
				_baseAngle = 360 / _noOfSlides;

				if(_settings.slides.length){					
					for(var i = 0;  i < _settings.slides.length; i++){
						var slide = $( "<div class='lMCarouselSlide' data-index="+i+" />" )
									.append( "<img src='"+_settings.slides[i].src+"' alt='"+_settings.slides[i].alt+"' />" );
						if(_settings.animation.indexOf('slide')!=-1){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}else if(_settings.animation.indexOf('scroll')!=-1){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}else if(_settings.animation == 'fade'){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}
						slide.css({ transform: _transform });
						_lMCarouselDiv.append(slide);
					}
				}else{
					_container.find('.'+_settings.slideClass).each(function(i){
						var slide = $(this).attr('data-index', i);
						if(_settings.animation.indexOf('slide')!=-1){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}else if(_settings.animation.indexOf('scroll')!=-1){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}else if(_settings.animation == 'fade'){
							_transform = 'rotateX('+_baseAngle*i+'deg) translateZ('+_translateZ+'px)';
						}
						slide = slide.css({ transform: _transform }).detach();
						_lMCarouselDiv.append(slide);
					});
				}
				_lMCarouselDiv.find('.'+_settings.slideClass).css({position: 'absolute', left: 0, top:0, width:'100%', height:'100%', backfaceVisibility: 'hidden'})
								.find('img').css({ width:'100%', height:'100%', objectFit:_settings.slideLayout });
				_perspective = _settings.perspective || _perspective;
				_container.css({ perspective: _perspective, width: _width+'px', height: _height+'px', position: "relative", overflow: 'visible'});
			}
			
			function _createControls(){
				if(_settings.rotationDirection == 'ltr'){
					_previousButton = $( "<div class='previous controls' style='left: -3px;'><img src='//ms.purplepatch.online/video-image/gp/singlevideo/arrow_l.png'></div>");
					_nextButton = $( "<div class='next controls' style='right: right: -3px;'><img src='//ms.purplepatch.online/video-image/gp/singlevideo/arrow.png'></div>");
				}else{
					_previousButton = $( "<div class='previous controls' style='left:-3px;'><img src='//ms.purplepatch.online/video-image/gp/singlevideo/arrow_l.png'></div>");
					_nextButton = $( "<div class='next controls' style='right:-3px;'><img src='//ms.purplepatch.online/video-image/gp/singlevideo/arrow.png'></div>");
				}
				
				_previousButton.add(_nextButton)
							   .css({position: 'absolute', top:'40%', zIndex:1, transform: 'translateY(-50%)', fontSize: '4em', color: 'rgba(255, 255, 255, 0.97)', cursor:'pointer', userSelect: 'none'})
							   .appendTo(_container)
							    $( ".previous" ).css({ "opacity": "0", "zIndex": "3" ,  transform: 'translateZ(1px)' } );
								$( ".next" ).css({ "opacity": "0", "zIndex": "3",  transform: 'translateZ(1px)' } );
							   
				
				_previousButton.on('click',_playPreviousSlide);
				_nextButton.on('click',_playNextSlide);
				
				_previousButton.hover(function(){
					 $( ".previous" ).css({ "opacity": "0" } );
				},function(){
					$( ".previous" ).css({ "opacity": "0" } );
				});
				_nextButton.hover(function(){
					 $( ".next" ).css({ "opacity": "0" } );
				},function(){
					 $( ".next" ).css({ "opacity": "0" } );
				});
				
				$(document).on('keydown', function(e){
					var rect = _container[0].getBoundingClientRect();
				    var inView = rect.bottom > 0 &&  rect.right > 0 &&
				        rect.left < (innerWidth || document.documentElement.clientWidth) &&
				        rect.top < (innerHeight || document.documentElement.clientHeight);
					
					if(inView && e.which == 37){
						_pauselMCarousel();
						if(_settings.rotationDirection == 'rtl'){
							_previousButton.click();
						}else{
							_nextButton.click();
						}
					}else if(inView && e.which == 39){
						_pauselMCarousel();
						if(_settings.rotationDirection == 'rtl'){
							_nextButton.click();
						}else{
							_previousButton.click();
						}
					}
				});
			}
		})();
		
		function _playlMCarousel(){
			setTimeout(_playNextSlide, _defaults.animationInterval);
		}
		function _pauselMCarousel(){
			if(_timer){clearInterval(_timer);}
		}
		function _pauseTimeout(){
			if(_timeOutTimer){window.clearTimeout(_timeOutTimer);}
		}
		function _playIfSlideVideo(){
			_videoSlide = _getCurrentSlide()[0].querySelector('video');
			if(_videoSlide){
				_videoSlide.currentTime=0;
				_videoSlide.play();
				_videoSlide.addEventListener('ended', _playNextSlide);
			}else{
				if (video) {video.pause();}				
				_timeOutTimer= setTimeout(_playNextSlide, _defaults.animationInterval);
			}
		}

		function _playNextSlide(){
			_pauseTimeout();
			_targetSlideIndex = _currentSlideIndex + 1;
			_animations.run(_settings.animation, _targetSlideIndex);
			_slideCarouseld();
			_playIfSlideVideo();
		}

		function _playPreviousSlide(){
			_pauseTimeout();
			_targetSlideIndex = _currentSlideIndex - 1;
			_animations.run(_settings.animation, _targetSlideIndex);
			_slideCarouseld();
			_playIfSlideVideo();
		}		 
		function _getCurrentSlide(){
			return _lMCarouselDiv.find('.'+_settings.slideClass).eq(_currentSlideIndex % _noOfSlides);
		}
		function _getNextSlide(){
			return _lMCarouselDiv.find('.'+_settings.slideClass).eq((_currentSlideIndex+1) % _noOfSlides);
		}
		function Animations(){ this.animations = {slide3D : _slide3D} }
		Animations.prototype.run = function run(animation, targetSlideIndex){
				this.animations[animation](targetSlideIndex);
		}
		function _slide3D(targetSlideIndex){
			_container.css({ perspective: _perspective, overflow: 'visible' });
			_rotationAngle = _baseAngle * targetSlideIndex;
			_lMCarouselDiv.css({ transform: 'translateZ('+-_translateZ+'px) rotateX('+-_rotationAngle+'deg)' });
		}
		function _slideCarouseld(){
			_currentSlideIndex = Math.round(_rotationAngle/_baseAngle);
		}
		return this;
	}
});

